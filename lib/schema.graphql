"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""Indicates an Input Object is a OneOf Input Object."""
directive @oneOf on INPUT_OBJECT

enum CategoryType {
  """present tense"""
  tense_pres

  """past tense"""
  tense_past

  """past/present particle"""
  verbform_part
}

type Collocation implements TextInterface {
  id: String
  text: FormattedText!

  """only returned in details query"""
  definition: Definition

  """only returned in details query"""
  note: Note
  lang: LangType!

  """
  Collocation may contain senses, this excludes translations, examples and usage.
  Only returned in details query
  """
  senses: [Sense]
  translations: [TextTranslated]

  """only returned in details query"""
  examples: [Example]

  """only returned in details query"""
  usage: [Usg]

  """Information for linking to details where the text can be found"""
  link: LemmaLink!
}

union DefContent = FormattedText | Gloss

"""Definition holding at least text or a gloss"""
type Definition {
  def: [DefContent!]!
  usage: [Usg]
}

"""details of a lemma"""
type Details implements MessageHolder {
  lemma: Lemma!

  """
  translations for the lemma, frisian lemmas may have both dutch and english translations
  """
  translations: [Lemma]
  link: LemmaLink
  senses: [Sense]
  texts: [Text]

  """lemmas that refer to this lemma"""
  referrers: [LemmaLink]

  """id of the data source"""
  source: String!
  message: [Message]
}

"""dutchism for a lemma"""
type Dutchism implements FormInterface {
  form: String!
  lang: LangType!
}

type Example implements TextInterface {
  id: String
  text: FormattedText!
  lang: LangType!
  translations: [TextTranslated]

  """only returned in details query"""
  note: Note

  """only returned in details query"""
  usage: [Usg]

  """Information for linking to details where the text can be found"""
  link: LemmaLink!
}

type FormattedText {
  """all text objects in order, their types can be used to apply styling"""
  text: [TextType!]!
}

"""contract of a form"""
interface FormInterface {
  form: String!
  lang: LangType!
}

type FormTranslation implements FormInterface {
  form: String!
  lang: LangType!
}

"""Explanations for a definition"""
type Gloss {
  gloss: FormattedText
}

"""
grammar annotations, NOTE that "_" is used because "." isn't allowed in name, it should be replaced by "." during processing
"""
enum GramType {
  """islemma.yes"""
  islemma_yes

  """abbr.yes"""
  abbr_yes

  """poss.yes"""
  poss_yes

  """reflex.yes"""
  reflex_yes

  """prefix.yes"""
  prefix_yes

  """prontype.prs: personal pronoun or determiner"""
  prontype_prs

  """prontype.rcp: reciprocal pronoun"""
  prontype_rcp

  """
  prontype.art: Article is a special case of determiner that bears the feature of definiteness
  """
  prontype_art

  """prontype.int: interrogative pronoun, determiner, numeral or adverb"""
  prontype_int

  """prontype.rel: relative pronoun, determiner, numeral or adverb"""
  prontype_rel

  """prontype.ind: indefinite pronoun, determiner, numeral or adverb"""
  prontype_ind

  """
  prontype.emp: Emphatic pro-adjectives (determiners) emphasize the nominal they depend on.
  """
  prontype_emp

  """prontype.exc: exclamative determiner"""
  prontype_exc

  """
  prontype.dem: Demonstrative pronouns are often parallel to interrogatives.
  """
  prontype_dem

  """case.nom: nominative"""
  case_nom

  """case.acc: accusative"""
  case_acc

  """case.dat: dative"""
  case_dat

  """case.gen: genitive"""
  case_gen

  """case.ins: instrumental / instructive"""
  case_ins

  """case.par: partitive"""
  case_par

  """tense.past: past tense"""
  tense_past

  """tense.pres: present tense"""
  tense_pres

  """tense.fut: future tense"""
  tense_fut

  """voice.act: The subject of the verb is the doer of the action (agent)."""
  voice_act

  """
  voice.pass: The subject of the verb is affected by the action (patient).
  """
  voice_pass

  """number.sing: A singular noun denotes one person, animal or thing."""
  number_sing

  """number.plur: A plural noun denotes several persons, animals or things."""
  number_plur

  """
  number.ptan: Plurale tantum, some nouns appear only in the plural form even though they denote one thing.
  """
  number_ptan

  """
  number.coll: Collective or mass or singulare tantum applies to words that use
  grammatical singular to describe sets of objects.
  """
  number_coll

  """
  person.1: The first person refers just to the speaker / author and in plural one or more additional persons.
  """
  person_1

  """person.2: The second person refers to the addressee(s)."""
  person_2

  """
  person.3: The third person refers to one or more persons that are neither speakers nor addressees.
  """
  person_3

  """
  verbtype.mod: Verbs that take infinitive of another verb as argument and add various modes of possibility, necessity etc.
  """
  verbtype_mod

  """
  verbtype.tense: Verb used to create periphrastic verb forms (tenses, passives etc.).
  """
  verbtype_tense

  """
  verbform.inf: Infinitive is the citation form of verbs in many languages.
  """
  verbform_inf

  """
  verbform.part: Participle is a non-finite verb form that shares properties of verbs and adjectives.
  """
  verbform_part

  """
  verbform.ger: Gerund is a non-finite verb form that shares properties of verbs and nouns.
  """
  verbform_ger

  """
  verbform.conv: The converb, also called adverbial participle or transgressive,
  is a non-finite verb form that shares properties of verbs and adverbs.
  """
  verbform_conv

  """
  polite.infm: usually meant for communication with family members and close friends.
  """
  polite_infm

  """
  polite.form: usually meant for communication with strangers and people of higher social status.
  """
  polite_form

  """numtype.ord: ordinal number (first, second,..)"""
  numtype_ord

  """numtype.card: cardinal number (one, two, many,....)"""
  numtype_card

  """degree.cmp: comparative, second degree"""
  degree_cmp

  """degree.sup: superlative, third degree"""
  degree_sup

  """degree.dim: Added to features in universaldependencies. Diminutive."""
  degree_dim

  """
  mood.imp: The speaker uses imperative to order or ask the addressee to do the action of the verb.
  """
  mood_imp

  """
  mood.sub: The subjunctive mood is used under certain circumstances in
  subordinate clauses, typically for actions that are subjective or otherwise uncertain.
  """
  mood_sub

  """
  mood.ind: A verb in indicative merely states that something happens, has happened or will happen.
  """
  mood_ind

  """gender.masc: masculine gender"""
  gender_masc

  """gender.fem: feminine gender"""
  gender_fem

  """gender.neut: neuter gender"""
  gender_neut

  """
  gender.com: Some languages do not distinguish masculine/feminine but they do
  distinguish neuter vs. non-neuter. The non-neuter is called common gender.
  """
  gender_com

  """hyph.yes"""
  hyph_yes

  """prodrop.yes"""
  prodrop_yes

  """clitic.yes"""
  clitic_yes

  """inflection.infl: Not in universaldependencies. inflected"""
  inflection_infl

  """inflection.uninf: Not in universaldependencies. uninflected"""
  inflection_uninf

  """suffix.yes"""
  suffix_yes

  """valency.1: An intransitive verb takes one argument (no object)"""
  valency_1

  """
  valency.2: A monotransitive verb takes two arguments (of which one object)
  """
  valency_2

  """
  valency.3: A ditransitive verb takes three arguments (of which a direct and an indirect object)
  """
  valency_3

  """
  convertedfrom.adj: Not in universaldependencies. adjective used as another category
  """
  convertedfrom_adj

  """
  convertedfrom.adv: Not in universaldependencies. adverb used as another category
  """
  convertedfrom_adv

  """
  convertedfrom.ver: Not in universaldependencies. verb used as another category
  """
  convertedfrom_ver

  """
  convertedfrom.num: Not in universaldependencies. numeral used as another category
  """
  convertedfrom_num

  """
  convertedfrom.pro: Not in universaldependencies. pronomen used as another category
  """
  convertedfrom_pro

  """
  convertedfrom.part: Not in universaldependencies. verbform part used as another category
  """
  convertedfrom_part

  """
  predicate.yes: Not in universaldependencies. statement about the subject
  """
  predicate_yes

  """construction.attr: Not in universaldependencies. attributive"""
  construction_attr

  """
  pos.adj: Adjectives are words that typically modify nouns and specify their properties or attributes.
  """
  pos_adj

  """
  pos.adp: Adposition is a cover term for prepositions and postpositions.
  """
  pos_adp

  """
  pos.adv: Adverbs are words that typically modify verbs for such categories as time, place, direction or manner.
  """
  pos_adv

  """
  pos.aux: An auxiliary is a function word that accompanies the lexical verb of
  a verb phrase and expresses grammatical distinctions not carried by the
  lexical verb, such as person, number, tense, mood, aspect, voice or evidentiality.
  """
  pos_aux

  """
  pos.cconj: A coordinating conjunction is a word that links words or larger
  constituents without syntactically subordinating one to the other and
  expresses a semantic relationship between them.
  """
  pos_cconj

  """
  pos.det: Determiners are words that modify nouns or noun phrases and express the reference of the noun phrase in context.
  """
  pos_det

  """
  pos.intj: An interjection is a word that is used most often as an exclamation or part of an exclamation.
  """
  pos_intj

  """
  pos.noun: Nouns are a part of speech typically denoting a person, place, thing, animal or idea.
  """
  pos_noun

  """
  pos.num: A numeral is a word, functioning most typically as a determiner,
  adjective or pronoun, that expresses a number and a relation to the number,
  such as quantity, sequence, frequency or fraction.
  """
  pos_num

  """
  pos.part: Particles are function words that must be associated with another
  word or phrase to impart meaning and that do not satisfy definitions of other
  universal parts of speech.
  """
  pos_part

  """
  pos.pron: Pronouns are words that substitute for nouns or noun phrases, whose
  meaning is recoverable from the linguistic or extralinguistic context.
  """
  pos_pron

  """
  pos.propn: A proper noun is a noun (or nominal content word) that is the name
  (or part of the name) of a specific individual, place, or object.
  """
  pos_propn

  """
  pos.punct: Punctuation marks are non-alphabetical characters and character
  groups used in many languages to delimit linguistic units in printed text.
  """
  pos_punct

  """
  pos.sconj: A subordinating conjunction is a conjunction that links
  constructions by making one of them a constituent of the other.
  """
  pos_sconj

  """
  pos.sym: A symbol is a word-like entity that differs from ordinary words by form, function, or both.
  """
  pos_sym

  """
  pos.verb: A verb is a member of the syntactic class of words that typically signal events and actions.
  """
  pos_verb

  """
  pos.x: The tag X is used for words that for some reason cannot be assigned a real part-of-speech category.
  """
  pos_x
}

"""emphasized / italic text"""
type I {
  """max one level of nesting"""
  textI: [TextTypeI!]!
}

type L {
  link: LemmaLink!
}

"""possible values for iso language codes in this schema"""
enum LangType {
  nl
  fry
  en
}

"""extended lemma information, for details query."""
type Lemma implements FormInterface {
  form: String!

  """grammar information about a form, at least part of speech (pos_*)"""
  grammar: [GramType!]!
  lang: LangType!
  note: Note
  meaning: String
  article: String
  hyphenation: String
  pronunciation: String

  """where lies the emphasis in pronunciation"""
  stress: String
  usage: [Usg]

  """type for proper nouns"""
  namekind: NameType
  subForms: [SubForm]
}

"""
Information for linking. Use lemma and lang for a lemmasearch; use source, lemma
and pos to find details. Note that lang may differ
from lang in results.
"""
type LemmaLink {
  """the id of the source to link to"""
  source: String

  """the lemma argument for a details query"""
  lemma: String!

  """
  the language of the source/lemma, which may differ from the language of results
  """
  lang: LangType

  """the part of speech argument for a details query"""
  pos: GramType

  """the id of a Sense or Text as found in the result of a details query"""
  id: String

  """suggested text to show for a link"""
  text: String
}

union LemmaOrText = Lemma | TextTranslated

"""paginated lemma information"""
type Lemmas implements PagingInterface & MessageHolder {
  offset: Int!
  total: Int!
  max: Int!
  lemmas: [MinLemma]
  message: [Message]
}

"""server side messages"""
type Message {
  text: String
  level: MessageLevel

  """true indicates a test environment was queried"""
  test: Boolean
}

interface MessageHolder {
  message: [Message]
}

enum MessageLevel {
  error
  warning
  info
}

"""
minimal lemma information with translations and subForms for lemmasearch query
"""
type MinLemma implements FormInterface {
  form: String!
  lang: LangType!

  """Information to link to details of the lemma"""
  link: LemmaLink!

  """grammar information about a form, at least part of speech (pos_*)"""
  grammar: [GramType!]!

  """
  translations for the lemma, frisian lemmas may have both dutch and english translations
  """
  translations: [FormTranslation]
  subForms: [SubForm]
}

"""possible values for details of proper nouns"""
enum NameType {
  countryName
  placeName
  geoName
  orgName
  personName
  animalName
  plantName
  birdName
}

type Note {
  text: FormattedText
  link: [LemmaLink] @deprecated(reason: "links are in text")
}

"""contract for paginated results"""
interface PagingInterface {
  offset: Int!
  total: Int!
  max: Int!
}

"""paradigm form of a lemma"""
type Paradigm implements FormInterface {
  form: String!

  """is this a split/broken form"""
  splitForm: Boolean

  """
  groups of grammar information about a form, each group denotes one "use" of the form
  """
  grammar: [[GramType!]]
  lang: LangType!
  note: Note
  hyphenation: String
  preferred: Boolean
  pronunciation: String

  """where lies the emphasis in pronunciation"""
  stress: String
}

"""holder for verb Paradigms in a certain category"""
type ParadigmCategory {
  type: CategoryType!
  forms: [Paradigm!]!
}

type Proverb implements TextInterface {
  id: String
  text: FormattedText!

  """only returned in details query"""
  definition: Definition
  lang: LangType!
  translations: [TextTranslated]

  """only returned in details query"""
  note: Note

  """only returned in details query"""
  usage: [Usg]

  """Information for linking to details where the text can be found"""
  link: LemmaLink!
}

"""quoted / bracketed text"""
type Q {
  """max one level of nesting"""
  textQ: [TextTypeQ!]!
}

"""
Language api for Dutch - Frisian - English, authoritative for Frisian hence Frisian may show more details.
You can use english when searching in lemmas or texts (examples etc.), you can directly query the frisian-english source,
you can request details from the english source (i.e. using the links in results) and you can request
english translations for frisian lemmas in results.
"""
type Query {
  """
  search for lemmas (lucene syntax), return a paginated graph with lemmas
  """
  lemmasearch(
    offset: Int! = 0
    max: Int! = 10
    searchterm: String!
    lang: LangType!
    pos: GramType

    """search in specific source, see sources query"""
    source: String

    """search case and diacrit sensitive"""
    sensitive: Boolean! = false

    """
    when true and language is frisian use lexicon results when dictionaries don't return any
    """
    lexiconFallback: Boolean! = false

    """
    when true english translations for frisian results are shown together with dutch translations
    """
    englishTranslations: Boolean! = false
  ): Lemmas

  """search in text (lucene syntax), return a paginated graph with texts"""
  textsearch(
    offset: Int! = 0
    max: Int! = 10
    searchterm: String!
    lang: LangType!

    """search in specific source, see sources query"""
    source: String

    """search case and diacrit sensitive"""
    sensitive: Boolean! = false
  ): Texts

  """show detailed information of a lemma"""
  details(
    """case and diacrit sensitive lemma (article) to find"""
    lemma: String!

    """part of speech for the lemma, see enums GramType starting with pos_"""
    pos: GramType

    """details in specific source, see LemmaLink and sources query"""
    source: String!

    """
    when true english translations for frisian results are shown together with dutch translations
    """
    englishTranslations: Boolean! = false
  ): [Details]

  """show categorized lists of rhyming words, best rhyming on top."""
  rhyme(
    offset: Int! = 0
    max: Int! = 500
    word: String!

    """provide pos (see GramType) for better determination of ipa for input"""
    pos: GramType

    """filter results on pos (see GramType)"""
    posFilter: GramType

    """show less relevant results"""
    showLessRelevant: Boolean! = false

    """When searchIpa is true the input is assumed to be ipa"""
    searchIpa: Boolean! = false

    """should ipa be shown in the results"""
    showIpa: Boolean! = false

    """
    how many syllables at most should be considered when looking for rhyming words
    """
    numSyllables: Int

    """should less common words be included"""
    showLessCommon: Boolean! = false

    """include half rhyme"""
    showHalfRhyme: Boolean! = false

    """should variants words be included"""
    showVariants: Boolean! = false
  ): RhymeResults!

  """translate text"""
  translatetext(text: String!, lang: LangType! = nl): TextTranslation

  """request information of sources that can be searched"""
  sources: [Source!]!
}

type RhymeGroup {
  """    for less relevant and half rhyme no syllable count"""
  syllableCount: Int
  description: String!
  rhyming: [Rhyming]!
  lessRelevant: Boolean
}

type RhymeResults implements PagingInterface & MessageHolder {
  offset: Int!
  total: Int!
  max: Int!

  """ total after filtering, for use in gui's"""
  filteredTotal: Int!

  """ number of syllable of the input word"""
  syllableCount: Int!
  searchTerm: String!

  """ the (calculated) phonetics for the input word, including similar sounds
  """
  ipa: [String!]!

  """ the phonetics of the input word"""
  totalIpa: String!
  rhymeGroups: [RhymeGroup]!
  message: [Message]
}

type Rhyming {
  text: String!
  ipa: String!

  """   ipa with groups of characters marked between ">" and "<", more of these means more similar to the input word
  """
  ipaMarked: String
  pos: GramType
}

type Sense {
  """may be referred to from LemmaLink"""
  id: String

  """A sense may use a different article"""
  article: String

  """A note for this and following senses (that don't have a groupNote)"""
  groupNote: Note
  definition: Definition

  """
  A Sense under Details holds a Lemma, a Sense under Collocation holds a TextTranslated
  """
  translations: [LemmaOrText]
  link: [LemmaLink]
  notes: [Note]
  texts: [Text]
}

type Source {
  """the id of the source as can be used in queries"""
  source: String!

  """The language of lemmas in the source"""
  fromlang: LangType!

  """The language of translations of lemmas in the source"""
  tolang: LangType!
  title: String!
  disabled: Boolean!

  """is this source a lexicon (with lemmas but without texts)"""
  lexicon: Boolean!
}

union SubForm = ParadigmCategory | Paradigm | Synonym | Variant | Dutchism

"""synonym for a lemma"""
type Synonym implements FormInterface {
  form: String!
  lang: LangType!
  meaning: String
}

"""plain text"""
type T {
  textT: String!
}

union Text = Example | Collocation | Proverb

interface TextInterface {
  """may be referred to from LemmaLink"""
  id: String
  text: FormattedText!
  lang: LangType!
  note: Note
  usage: [Usg]
}

"""paginated text information"""
type Texts implements PagingInterface & MessageHolder {
  offset: Int!
  total: Int!
  max: Int!
  texts: [Text]
  message: [Message]
}

"""translation for example, proverb or collocation"""
type TextTranslated implements TextInterface {
  id: String
  text: FormattedText!
  lang: LangType!
  note: Note
  usage: [Usg]
}

"""translation of text"""
type TextTranslation implements MessageHolder {
  translation: String!
  translationlang: LangType
  message: [Message]
}

"""T, Q, I or L, Q can contain I and vise versa (max one level deep)"""
union TextType = T | Q | I | L

"""T or Q"""
union TextTypeI = T | Q

"""T or I"""
union TextTypeQ = T | I

type Usg {
  type: UsgType!
  text: String!
}

"""possible values for usage information"""
enum UsgType {
  lang
  time
  freq
  connotation
  hint
  style
  geo
  medium
  domain
  concerning
}

"""variant of a lemma"""
type Variant implements FormInterface {
  form: String!
  lang: LangType!
}

